{"version":3,"file":"index.cjs.js","sources":["../src/api/use-service.ts","../src/api/yieldable-port.ts","../src/api/ref-primitive.ts","../src/api/convenience.ts","../src/api/yieldable-handler.ts","../src/api/yielded-value.ts","../src/api/submit.ts","../src/api/typed-ref.ts","../src/api/yield.ts","../src/api/extract-yielding-ref.ts","../src/api/fulfill.ts","../src/api/use-callback.ts","../src/api/use-effect.ts","../src/api/use-form-refs.ts","../src/api/use-memo.ts","../src/api/use-ref.ts","../src/api/use-state.ts","../src/always/dependencies-vs-dependencies.ts"],"sourcesContent":["import { Service } from \"./service\";\n\nconst UseServiceSymbol = Symbol.for(\"react-44ms/api/UseServiceSymbol\");\n\ndeclare global {\n  interface Window {\n    [UseServiceSymbol]: Service;\n  }\n}\n\nexport const useService = () => {\n  return window[UseServiceSymbol];\n};\n\nexport const setYourService = (yourService: Service) => {\n  window[UseServiceSymbol] = yourService;\n};\n","export const YieldablePortSymbol = Symbol.for(\n  \"react-44ms/api/YieldablePortSymbol\"\n);\nexport const YieldablePort = (inputName: string) => {\n  const yieldablePortPrimitive: YieldablePortPrimitive = {\n    [YieldablePortSymbol]: inputName,\n    _yieldablePort: YieldablePortSymbol,\n  };\n  return yieldablePortPrimitive;\n};\n\nexport interface YieldablePortPrimitive {\n  [YieldablePortSymbol]: string;\n  _yieldablePort: typeof YieldablePortSymbol;\n}\n\nexport const isThatAYieldablePort = (\n  input?: any\n): input is YieldablePortPrimitive => {\n  return input?._yieldablePort === YieldablePortSymbol;\n};\n","export const RefSymbol = Symbol.for(\"react-44ms/api/RefSymbol\");\n\nexport interface RefPrimitive {\n  [RefSymbol]: string;\n  _refSymbol: typeof RefSymbol;\n}\n\nexport const isThatARef = (that: any): that is RefPrimitive => {\n  return !!that && that._refSymbol === RefSymbol;\n};\n\nexport const anyRefishToStringValue = (refish?: any): string => {\n  if (isThatARef(refish)) {\n    return refish[RefSymbol];\n  }\n  return refish || \"\";\n};\n","import { RefPrimitive, RefSymbol } from \"./ref-primitive\";\n\nconst element = {\n  name: <YourInterfaceYouWantToKey extends any>(\n    whatever: keyof YourInterfaceYouWantToKey\n  ) => whatever,\n};\n\nconst RefPrimitiveConvenience = {\n  on: <YourInterfaceYouWantToKey extends any>(\n    whatever: keyof YourInterfaceYouWantToKey\n  ) => {\n    const refPrimitive: RefPrimitive = {\n      [RefSymbol]: `${whatever as unknown as string}`,\n      _refSymbol: RefSymbol,\n    };\n    return refPrimitive;\n  },\n};\n\nexport const Convenience = {\n  element,\n  RefPrimitive: RefPrimitiveConvenience,\n};\n","export const YieldableHandler = (eventHandlerExplicitNameOnJsx: string) => {\n  const yieldableHandler: YieldableHandlerPrimitive = {\n    [YieldableHandlerSymbol]: eventHandlerExplicitNameOnJsx,\n    _yieldableHandler: YieldableHandlerSymbol,\n  };\n  return yieldableHandler;\n};\nexport const YieldableHandlerSymbol = Symbol.for(\n  \"react-44ms/api/YieldableHandlerSymbol\"\n);\n\nexport interface YieldableHandlerPrimitive {\n  [YieldableHandlerSymbol]: string;\n  _yieldableHandler: typeof YieldableHandlerSymbol;\n}\n\nexport const isThatAYieldableHandler = (\n  input?: any\n): input is YieldableHandlerPrimitive => {\n  return input?._yieldableHandler === YieldableHandlerSymbol;\n};\n\nexport const anyYieldableHandlerToValue = (refish?: any): string => {\n  if (isThatAYieldableHandler(refish)) {\n    return refish[YieldableHandlerSymbol];\n  }\n  return \"\";\n};","export const YieldedValueSymbol = Symbol.for(\n  \"react-44ms/api/YieldedValueSymbol\"\n);\nexport const YieldedValueNotFoundSymbol = Symbol.for(\n  \"react-44ms/api/YieldedValueNotFoundSymbol\"\n);\n\nexport interface YieldedValuePrimitive {\n  [YieldedValueSymbol]: any;\n  _yieldedValueSymbol: typeof YieldedValueSymbol;\n}\n\nexport const isThatAYieldedValuePrimitive = (\n  that: any\n): that is YieldedValuePrimitive => {\n  return !!that && that._yieldedValueSymbol === YieldedValueSymbol;\n};\n\nexport const extractYieldedValue = (refish?: any) => {\n  if (isThatAYieldedValuePrimitive(refish)) {\n    return refish[YieldedValueSymbol];\n  }\n  return YieldedValueNotFoundSymbol;\n};\n\nexport const YieldAValueAtTheEnd = (value: any): YieldedValuePrimitive => {\n  return {\n    [YieldedValueSymbol]: value,\n    _yieldedValueSymbol: YieldedValueSymbol,\n  };\n};\n","import { useService } from \"./use-service\";\n\nexport const submit = (submission: true) => {\n  const { useSubmit } = useService();\n  const submitter = useSubmit();\n  return submitter.submit(submission);\n};\n\nsubmit.NO_SUBMIT_FOUND_INVALID_FORM_REASON_KEY = Symbol.for(\n  \"React44ms/FORM_SUBMIT_INVALID_NO_SUBMIT_KEY\"\n);\n","import { RefPrimitive } from \"./ref-primitive\";\n\nexport const TypedRefSymbol = Symbol.for(\"react-44ms/api/TypedRefSymbol\");\nexport const TypedRefValueSymbol = Symbol.for(\n  \"react-44ms/api/TypedRefValueSymbol\"\n);\n\nexport interface TypedRef<YourExpectedTypeThatLivesAtTheRefdLocation>\n  extends RefPrimitive {\n  [TypedRefSymbol]: RefPrimitive;\n  [TypedRefValueSymbol]: YourExpectedTypeThatLivesAtTheRefdLocation;\n  _typedRefSymbol: typeof TypedRefSymbol;\n}\n\nexport const isThatATypedRef = (that: any): that is TypedRef<any> => {\n  return !!that && that._typedRefSymbol === TypedRefSymbol;\n};\n","import { Reactionary } from \"./reactionary\";\nimport { useService } from \"./use-service\";\n\nexport const Yield: Reactionary[\"Yield\"] = (ref) => {\n  const { useReactingPower } = useService();\n  const reactingPower = useReactingPower();\n  return reactingPower.service.Reactionary.Yield(ref);\n};\n","import { ref } from \"./ref\";\nimport { isThatARef } from \"./ref-primitive\";\nimport {\n  isThatAYieldableHandler,\n  YieldableHandlerPrimitive,\n} from \"./yieldable-handler\";\nimport { isThatAYieldablePort, YieldablePortPrimitive } from \"./yieldable-port\";\nimport {\n  extractYieldedValue,\n  isThatAYieldedValuePrimitive,\n  YieldedValueNotFoundSymbol,\n  YieldedValuePrimitive,\n} from \"./yielded-value\";\nimport { YieldingRef } from \"./yielding-ref\";\n\nexport const extractYieldingRef = (\n  refThatCanHaveYielding:\n    | ref\n    | YieldableHandlerPrimitive\n    | (\n        | ref\n        | YieldablePortPrimitive\n        | YieldableHandlerPrimitive\n        | YieldedValuePrimitive\n      )[]\n    | undefined\n) => {\n  let yieldingCallstackAdditions: ref[] = [];\n  let yieldablePort: YieldablePortPrimitive | undefined = undefined;\n  let yieldableHandler: YieldableHandlerPrimitive | undefined = undefined;\n  let yieldedValue: any | undefined = YieldedValueNotFoundSymbol;\n  if (Array.isArray(refThatCanHaveYielding)) {\n    type NoLongerAnyYieldableHandlerPrimitive = ref[];\n    refThatCanHaveYielding = refThatCanHaveYielding.filter((refComponent) => {\n      if (isThatAYieldableHandler(refComponent)) {\n        yieldableHandler = refComponent;\n        return false;\n      }\n      return true;\n    }) as NoLongerAnyYieldableHandlerPrimitive;\n\n    refThatCanHaveYielding = (\n      refThatCanHaveYielding as NoLongerAnyYieldableHandlerPrimitive\n    ).filter((refComponent: ref) => {\n      if (isThatAYieldablePort(refComponent)) {\n        yieldablePort = refComponent;\n        return false;\n      }\n      return true;\n    });\n\n    refThatCanHaveYielding = (\n      refThatCanHaveYielding as NoLongerAnyYieldableHandlerPrimitive\n    ).filter((refComponent: ref) => {\n      if (isThatAYieldedValuePrimitive(refComponent)) {\n        yieldedValue = extractYieldedValue(refComponent);\n        return false;\n      }\n      return true;\n    });\n\n    const lastValueInTheRef =\n      refThatCanHaveYielding[refThatCanHaveYielding.length - 1];\n    if (!isThatARef(lastValueInTheRef)) {\n      yieldedValue = lastValueInTheRef;\n      refThatCanHaveYielding = refThatCanHaveYielding.slice(\n        0,\n        refThatCanHaveYielding.length - 1\n      );\n    }\n\n    yieldingCallstackAdditions =\n      refThatCanHaveYielding as NoLongerAnyYieldableHandlerPrimitive;\n  } else if (refThatCanHaveYielding) {\n    yieldingCallstackAdditions = [refThatCanHaveYielding as ref];\n  }\n\n  const yieldingRef: YieldingRef = {\n    yieldingCallstackAdditions,\n    yieldablePort,\n    yieldableHandler,\n    yieldedValue,\n  };\n\n  return yieldingRef;\n};\n","export type fulfill = Symbol & {};\nexport const fulfill = {\n  name: <T extends any>(whatever: keyof T) => whatever,\n};\n","import { Reactionary } from \"./reactionary\";\nimport { useService } from \"./use-service\";\n\nexport const useCallback: Reactionary[\"useCallback\"] = <\n  YourCallbackType extends Function\n>(\n  callback: YourCallbackType,\n  deps: any[]\n) => {\n  const { useReactingPower } = useService();\n  const reactingPower = useReactingPower();\n  return reactingPower.service.Reactionary.useCallback<YourCallbackType>(\n    callback,\n    deps\n  );\n};\n","import { Reactionary } from \"./reactionary\";\nimport { useService } from \"./use-service\";\n\nexport const useEffect: Reactionary[\"useEffect\"] = (\n  computer,\n  dependencies,\n  configuration\n) => {\n  const { useReactingPower } = useService();\n  const reactingPower = useReactingPower();\n  return reactingPower.service.Reactionary.useEffect(\n    computer,\n    dependencies,\n    configuration\n  );\n};\n","import { Reactionary } from \"./reactionary\";\nimport { ref } from \"./ref\";\nimport { useService } from \"./use-service\";\n\nexport const useFormRefs: Reactionary[\"useFormRefs\"] = <YourType extends any>(\n  parent: ref\n) => {\n  const { useReactingPower } = useService();\n  const reactingPower = useReactingPower();\n  return reactingPower.service.Reactionary.useFormRefs<YourType>(parent);\n};\n","import { Reactionary } from \"./reactionary\";\nimport { useService } from \"./use-service\";\n\nexport const useMemo: Reactionary[\"useMemo\"] = <YourType extends any>(\n  computer: () => YourType,\n  dependencies: any[]\n) => {\n  const { useReactingPower } = useService();\n  const reactingPower = useReactingPower();\n  return reactingPower.service.Reactionary.useMemo<YourType>(\n    computer,\n    dependencies\n  );\n};\n","import { Reactionary } from \"./reactionary\";\nimport { useService } from \"./use-service\";\n\nexport const useRef: Reactionary[\"useRef\"] = <YourType extends any>(\n  initialState: YourType\n) => {\n  const { useReactingPower } = useService();\n  const reactingPower = useReactingPower();\n  return reactingPower.service.Reactionary.useRef<YourType>(initialState);\n};\n","import { Reactionary } from \"./reactionary\";\nimport { useService } from \"./use-service\";\n\nexport const useState: Reactionary[\"useState\"] = <YourType extends any>(\n  initialState: YourType\n): [YourType, UseStateSetter<YourType>] => {\n  const { useReactingPower } = useService();\n  const reactingPower = useReactingPower();\n  const theValue =\n    reactingPower.service.Reactionary.useState<YourType>(initialState);\n  return theValue;\n};\n\nexport type UseStateSetter<YourType extends any> = (newState: YourType) => void;\n","type AreTheDependenciesTheSame = boolean;\nexport const YesTheDependenciesAreTheSame: AreTheDependenciesTheSame = true;\nexport const NoTheDependenciesAreNotTheSame: AreTheDependenciesTheSame = false;\nexport const dependenciesVsDependencies = (\n  lhs: any[] | null | undefined,\n  rhs: any[] | null | undefined\n): AreTheDependenciesTheSame => {\n  if (!lhs && !rhs) {\n    return YesTheDependenciesAreTheSame;\n  }\n  if (!lhs && rhs) {\n    return NoTheDependenciesAreNotTheSame;\n  }\n  if (lhs && !rhs) {\n    return NoTheDependenciesAreNotTheSame;\n  }\n  if (lhs && rhs) {\n    if (lhs.length != rhs.length) {\n      return NoTheDependenciesAreNotTheSame;\n    }\n    const isAnyDependencyDifferentSinceLastTime = lhs.some((lhs, index) =>\n      !Object.is(lhs, rhs[index])\n    );\n    if (isAnyDependencyDifferentSinceLastTime) {\n      return NoTheDependenciesAreNotTheSame;\n    }\n  }\n  return YesTheDependenciesAreTheSame;\n};\n"],"names":["UseServiceSymbol","Symbol","for","useService","window","YieldablePortSymbol","isThatAYieldablePort","input","_yieldablePort","RefSymbol","isThatARef","that","_refSymbol","Convenience","element","name","whatever","RefPrimitive","on","YieldableHandlerSymbol","isThatAYieldableHandler","_yieldableHandler","YieldedValueSymbol","YieldedValueNotFoundSymbol","isThatAYieldedValuePrimitive","_yieldedValueSymbol","extractYieldedValue","refish","submit","submission","useSubmit","NO_SUBMIT_FOUND_INVALID_FORM_REASON_KEY","TypedRefSymbol","TypedRefValueSymbol","ref","useReactingPower","service","Reactionary","Yield","value","eventHandlerExplicitNameOnJsx","inputName","refThatCanHaveYielding","yieldablePort","yieldableHandler","yieldingCallstackAdditions","yieldedValue","Array","isArray","lastValueInTheRef","filter","refComponent","length","slice","_typedRefSymbol","yourService","callback","deps","useCallback","computer","dependencies","configuration","useEffect","parent","useFormRefs","useMemo","initialState","useRef","useState","YesTheDependenciesAreTheSame","NoTheDependenciesAreNotTheSame","lhs","rhs","isAnyDependencyDifferentSinceLastTime","some","index","Object","is"],"mappings":"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"}